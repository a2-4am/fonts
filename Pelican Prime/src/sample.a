;license:MIT
;(c) 2023 by 4am
;
!cpu 6502
!to "build/SAMPLE.SYSTEM#FF2000",plain
*=$2000

         !source "src/constants.a"              ; no code
         !source "../common/src/constants.a"    ; no code
         !source "../common/src/macros.a"       ; no code

         +READ_ROM_NO_WRITE
         sta   PRIMARYCHARSET
         sta   CLR80VID
         sta   STOREOFF
         sta   READMAINMEM
         sta   WRITEMAINMEM
         jsr   ROM_TEXT
         jsr   ROM_HOME
         jsr   ROM_NORMAL
         jsr   ROM_IN0
         jsr   ROM_PR0
         +BUILD_HGR_LOOKUP_TABLES HGRLO, HGRHI

         ; relocate font data
         ldx   #>(EndPelicanPrimeData - StartPelicanPrimeData)
         ldy   #0
PP       lda   StartPelicanPrimeData, y
PPDEST   sta   PelicanPrimeWidths, y
         iny
         bne   PP
         inc   PP+2
         inc   PPDEST+2
         dex
         bpl   PP

         ; relocate program code
-        inc   FM+2
         inc   FMDEST+2
         lda   FM+2
         cmp   #>LastMover
         bcc   -
         ldx   #0
FM       lda   FirstMover, x
FMDEST   sta   RELOC, x
         inx
         bne   FM
         dec   FM+2
         dec   FMDEST+2
         lda   FMDEST+2
         cmp   #>RELOC
         bcs   FM

         ; copy part of font drawing routine to zero page
         ldx   #(DPC_DRAW_END-DPC_DRAW_START)
-        lda   DPC_DRAW_START, x
         sta   dpc_draw, x
         dex
         bpl   -

         ; generate font preshift tables
         lda   #<PelicanPrimeShift0
         sta   ZPTMP0
         lda   #>PelicanPrimeShift0
         sta   ZPTMP0 + 1
         lda   #<PelicanPrimeShift1
         sta   ZPTMP1
         lda   #>PelicanPrimeShift1
         sta   ZPTMP1 + 1
         ldx   #6
         ldy   #0
--       lda   ZPTMP1
         clc
         adc   #<(kPelicanPrimeCount * 9 * 2)
         sta   ZPTMP2
         lda   ZPTMP1 + 1
         adc   #>(kPelicanPrimeCount * 9 * 2)
         sta   ZPTMP2 + 1
-        lda   (ZPTMP0), y
         inc   ZPTMP0
         bne   +
         inc   ZPTMP0 + 1
+        asl
         asl
         php
         lsr
         sta   (ZPTMP1), y
         inc   ZPTMP1
         bne   +
         inc   ZPTMP1 + 1
+
gpp_expand1
         lda   #0                    ; value is 0 initially, SMC later
gpp_expand2
         beq   +                     ; always branches initially, opcode+value SMC later
         inc   ZPTMP0
         bne   +
         inc   ZPTMP0 + 1
+        plp
         rol
         sta   (ZPTMP1), y
         inc   ZPTMP1
         bne   +
         inc   ZPTMP1 + 1
+        lda   ZPTMP1
         cmp   ZPTMP2
         lda   ZPTMP1 + 1
         sbc   ZPTMP2 + 1
         bne   -
         sta   gpp_expand2 + 1
         lda   #$b1                  ; LDA ($zp),Y opcode
         sta   gpp_expand1
         lda   #ZPTMP0
         sta   gpp_expand1 + 1
         dex
         bne   --

         ; build pixel-to-byte/offset tables
         ldy   #0
         ldx   #7
@byteloop
         lda   #0
         sta   HPixelToByte, y
         dex
         bne   +
         inc   @byteloop+1
         ldx   #7
+        iny
         bne   @byteloop

         ;Y=0
         ldx   #0
@offsetloop
         txa
         sta   HPixelToOffset, y
         inx
         cpx   #7
         bcc   +
         ldx   #0
+        iny
         bne   @offsetloop

         jmp   Start

StartPelicanPrimeData
         !source "src/ui.font.data.a"
EndPelicanPrimeData

FirstMover
!pseudopc RELOC {
Start
         jsr   Home
         +LDADDR s_header1
         jsr   DrawCenteredString
         inc   VTAB
         +LDADDR s_header2
         jsr   DrawCenteredString
         inc   VTAB
         +LDADDR s_header3
         jsr   DrawCenteredString
         inc   VTAB
         inc   VTAB

         lda   #0
         sta   STRINGINDEX
PrintLoop
         ldx   STRINGINDEX
         lda   StringPointers, x
         inx
         ldy   StringPointers, x
         beq   PrintDone
         inx
         stx   STRINGINDEX
         ldx   #0
         jsr   DrawString
         inc   VTAB
         bne   PrintLoop             ; always branches
PrintDone
         +DEBUGWAIT
         jsr   PRODOS_MLI
         !byte $65
         !word +
+        !byte 4

s_header1
         !byte 13
         !raw  "Pelican Prime"
s_header2
         !byte 36
         !raw  "a proportional font for the Apple ]["
s_header3
         !byte 15
         !raw  "(c) 2023 by 4am"
s_blank
         !byte 0
s_sample1
         !byte 40
         !raw  "Pack my box with five dozen liquor jugs."
s_sample2
         !byte 37
         !raw  "Jackdaws love my big sphinx of quartz"
s_sample3
         !byte 37
         !raw  "Sphinx of black quartz, judge my vow!"
s_sample4
         !byte 36
         !raw  "The five boxing wizards jump quickly"
s_sample5
         !byte 35
         !raw  "How quickly daft jumping zebras vex"
s_sample6
         !byte 34
         !raw  "Glib jocks quiz nymph to vex dwarf"
s_alpha_upper
         !byte 26
         !raw  "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
s_alpha_lower
         !byte 26
         !raw  "abcdefghijklmnopqrstuvwxyz"
s_numerals
         !byte 40
         !raw  "1234567890!@#$%^&*()-=_+[]\\{}|;':\",./<>?"

StringPointers
         !word s_sample1
         !word s_sample2
         !word s_sample3
         !word s_sample4
         !word s_sample5
         !word s_sample6
         !word s_blank
         !word s_alpha_upper
         !word s_alpha_lower
         !word s_numerals
         !word 0

         !source "../common/src/ui.common.a"
         !source "src/ui.font.a"
}
LastMover
