#!/usr/bin/env python3

# |all_chars| array must match order of data in font-master.txt.
# This is not checked.
# Characters may be in any order, except that the first must be the lowest
# ASCII value and the last must be the highest ASCII value.
# Gaps in ASCII values are allowed anywhere.
# Do not include the space character.
all_chars = list(map(chr, range(0x21, 0x80)))

# must match kPropFontMaskHeight in renderer
height = 7

min_index = ord(all_chars[0])
max_index_plus_1 = ord(all_chars[-1]) + 1
step = height * 2
data = {}
with open("font-master.txt", "r") as f:
    for c in all_chars:
        data[c] = {}
        data[c]["description"] = f.readline().strip()[1:]
        data[c]["rawbits"] = []
        data[c]["width"] = 0
        for row in range(height):
            rawbits = f.readline().strip()
            data[c]["rawbits"].append(rawbits)
            rowwidth = rawbits.rfind("1")
            data[c]["width"] = max(rowwidth, data[c]["width"])

used_chars = ''.join(all_chars)

print("; Patrol II pixel font")
print("; (c) 2025 by 4am")
print("; license:Open Font License 1.1, see OFL.txt")
print("; based on 'Patrol Bold' (c) 2024 by Damien Guard")
print("; https://damieng.com/typography/zx-origins/patrol/")
print("; This file is automatically generated from font-master.txt")

print()
print(f"kPropFontMin = {hex(min_index)} ; ASCII value of first character")
print(f"kPropFontMax = {hex(max_index_plus_1)} ; 1 + ASCII value of last character")
print(f"kPropFontCount = {len(used_chars)} ; total number of characters")

print()
print("_PropFontWidths")
for c in map(chr, range(min_index, max_index_plus_1)):
    if c in used_chars:
        width = data[c]['width'] + 2
        description = data[c]['description']
    else:
        width = 0
        description = "unused"
    print(f"         !byte {width} ; {description}")

print()
print("_PropFontOffsetLo")
for c in map(chr, range(min_index, max_index_plus_1)):
    if c in used_chars:
        offset = step * used_chars.find(c)
        description = data[c]["description"]
    else:
        offset = 65535
        description = "unused"
    print(f"         !byte <{offset} ; {description}")

print()
print("_PropFontOffsetHi")
for c in map(chr, range(min_index, max_index_plus_1)):
    if c in used_chars:
        offset = step * used_chars.find(c)
        description = data[c]["description"]
    else:
        offset = 65535
        description = "unused"
    print(f"         !byte >{offset} ; {description}")

print()
print(f"_PropFontShift0")
for c in used_chars:
    print(f"         ; {data[c]['description']}")
    for rawbits in data[c]["rawbits"]:
        bits = rawbits[:7][::-1] + f"000000{rawbits[-1]}"
        byte1 = "%0" + bits[:7]
        byte2 = "%0" + bits[7:14]
        print(f"         !byte {byte1},{byte2}")
